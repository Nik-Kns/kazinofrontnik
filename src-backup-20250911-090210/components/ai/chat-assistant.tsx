"use client";

import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ScrollArea } from "@/components/ui/scroll-area";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Badge } from "@/components/ui/badge";
import {
  MessageCircle,
  Send,
  Bot,
  User,
  Sparkles,
  HelpCircle,
  Lightbulb,
  TrendingUp,
  AlertCircle,
  X,
  Minimize2,
  Maximize2
} from "lucide-react";
import { cn } from "@/lib/utils";

interface Message {
  id: string;
  content: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
  type?: 'text' | 'suggestion' | 'action';
  actions?: Array<{ label: string; action: () => void }>;
}

interface ChatAssistantProps {
  className?: string;
  defaultOpen?: boolean;
}

export function ChatAssistant({ className, defaultOpen = false }: ChatAssistantProps) {
  const [isOpen, setIsOpen] = useState(defaultOpen);
  const [isMinimized, setIsMinimized] = useState(false);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const scrollAreaRef = useRef<HTMLDivElement>(null);
  
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      content: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∞–Ω–∞–ª–∏–∑–æ–º –º–µ—Ç—Ä–∏–∫, —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞–º–ø–∞–Ω–∏–π –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?',
      sender: 'assistant',
      timestamp: new Date(),
      type: 'text'
    }
  ]);

  const quickActions = [
    { icon: TrendingUp, label: '–ê–Ω–∞–ª–∏–∑ –º–µ—Ç—Ä–∏–∫', query: '–ü–æ–∫–∞–∂–∏ –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫' },
    { icon: Lightbulb, label: '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', query: '–ö–∞–∫–∏–µ –µ—Å—Ç—å –Ω–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏?' },
    { icon: AlertCircle, label: '–†–∏—Å–∫–∏', query: '–ï—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏?' },
    { icon: HelpCircle, label: '–ü–æ–º–æ—â—å', query: '–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é?' }
  ];

  const handleSend = () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputValue,
      sender: 'user',
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
    setTimeout(() => {
      const assistantResponse = generateResponse(inputValue);
      setMessages(prev => [...prev, assistantResponse]);
      setIsTyping(false);
    }, 1500);
  };

  const generateResponse = (query: string): Message => {
    const lowerQuery = query.toLowerCase();
    
    if (lowerQuery.includes('–º–µ—Ç—Ä–∏–∫') || lowerQuery.includes('–∞–Ω–∞–ª–∏–∑')) {
      return {
        id: Date.now().toString(),
        content: '–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫:\n\nüìä Retention Rate: 62% (-3% –∑–∞ –Ω–µ–¥–µ–ª—é)\nüí∞ LTV: ‚Ç¨485 (+5% –∑–∞ –º–µ—Å—è—Ü)\nüìâ Churn Rate: 8.2% (—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è)\n\n–†–µ–∫–æ–º–µ–Ω–¥—É—é –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –æ—Ç—Ç–æ–∫–∞.',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text',
        actions: [
          { label: '–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', action: () => window.location.href = '/builder' },
          { label: '–î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞', action: () => window.location.href = '/analytics' }
        ]
      };
    }
    
    if (lowerQuery.includes('—Ä–µ–∫–æ–º–µ–Ω–¥')) {
      return {
        id: Date.now().toString(),
        content: '–£ –≤–∞—Å –µ—Å—Ç—å 3 –Ω–æ–≤—ã–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n\n1. üî¥ –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –¥–ª—è 2,847 —Å–ø—è—â–∏—Ö –∏–≥—Ä–æ–∫–æ–≤\n2. üü° –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å—ã –¥–ª—è VIP —Å–µ–≥–º–µ–Ω—Ç–∞\n3. üî¥ –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –æ—Ç—Ç–æ–∫ 156 –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text',
        actions: [
          { label: '–í—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏', action: () => window.location.href = '/recommendations' }
        ]
      };
    }
    
    if (lowerQuery.includes('–∫–∞–º–ø–∞–Ω') || lowerQuery.includes('—Å–æ–∑–¥–∞—Ç—å')) {
      return {
        id: Date.now().toString(),
        content: '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏:\n\n1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–°—Ü–µ–Ω–∞—Ä–∏–∏"\n2. –ù–∞–∂–º–∏—Ç–µ "–°–æ–∑–¥–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π"\n3. –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Å –Ω—É–ª—è\n4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è\n5. –ó–∞–ø—É—Å—Ç–∏—Ç–µ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n–ú–æ–≥—É –ø–æ–º–æ—á—å —Å–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é —Ä–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text',
        actions: [
          { label: '–°–æ–∑–¥–∞—Ç—å –∫–∞–º–ø–∞–Ω–∏—é', action: () => window.location.href = '/builder' },
          { label: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω', action: () => window.location.href = '/templates' }
        ]
      };
    }
    
    if (lowerQuery.includes('—Ä–∏—Å–∫')) {
      return {
        id: Date.now().toString(),
        content: '‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏:\n\n‚Ä¢ 156 –∏–≥—Ä–æ–∫–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –æ—Ç—Ç–æ–∫–∞ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ—Ç–µ—Ä—è ‚Ç¨68,000)\n‚Ä¢ Retention Rate —É–ø–∞–ª –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ –Ω–∞ 8%\n‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Å–∏—è –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å–Ω–∏–∑–∏–ª–∞—Å—å –Ω–∞ 12%\n\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—Ä–æ—á–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –º–µ—Ä—ã!',
        sender: 'assistant',
        timestamp: new Date(),
        type: 'text',
        actions: [
          { label: '–ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π', action: () => window.location.href = '/recommendations' }
        ]
      };
    }

    // –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
    return {
      id: Date.now().toString(),
      content: '–Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å:\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–æ–º –º–µ—Ç—Ä–∏–∫ –∏ KPI\n‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ–º –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –∫–∞–º–ø–∞–Ω–∏–π\n‚Ä¢ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∏–≥—Ä–æ–∫–æ–≤\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–π\n\n–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?',
      sender: 'assistant',
      timestamp: new Date(),
      type: 'text'
    };
  };

  const handleQuickAction = (query: string) => {
    setInputValue(query);
    handleSend();
  };

  useEffect(() => {
    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    if (scrollAreaRef.current) {
      scrollAreaRef.current.scrollTop = scrollAreaRef.current.scrollHeight;
    }
  }, [messages]);

  if (!isOpen) {
    return (
      <Button
        onClick={() => setIsOpen(true)}
        className={cn(
          "fixed bottom-6 right-6 h-14 w-14 rounded-full shadow-lg",
          "bg-primary hover:bg-primary/90",
          className
        )}
      >
        <MessageCircle className="h-6 w-6" />
      </Button>
    );
  }

  if (isMinimized) {
    return (
      <Card className={cn(
        "fixed bottom-6 right-6 w-80 shadow-lg",
        className
      )}>
        <CardHeader className="p-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Bot className="h-5 w-5 text-primary" />
              <CardTitle className="text-sm">–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</CardTitle>
            </div>
            <div className="flex gap-1">
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => setIsMinimized(false)}
              >
                <Maximize2 className="h-4 w-4" />
              </Button>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={() => setIsOpen(false)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
      </Card>
    );
  }

  return (
    <Card className={cn(
      "fixed bottom-6 right-6 w-96 h-[600px] shadow-lg flex flex-col",
      className
    )}>
      <CardHeader className="pb-3">
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-2">
            <Bot className="h-5 w-5 text-primary" />
            <CardTitle>–ò–ò –ü–æ–º–æ—â–Ω–∏–∫</CardTitle>
            <Badge variant="secondary" className="text-xs">
              <Sparkles className="mr-1 h-3 w-3" />
              Online
            </Badge>
          </div>
          <div className="flex gap-1">
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8"
              onClick={() => setIsMinimized(true)}
            >
              <Minimize2 className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="h-8 w-8"
              onClick={() => setIsOpen(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardHeader>
      <CardContent className="flex-1 flex flex-col p-0">
        <ScrollArea 
          ref={scrollAreaRef}
          className="flex-1 px-4 py-2"
        >
          <div className="space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  "flex gap-3",
                  message.sender === 'user' && "justify-end"
                )}
              >
                {message.sender === 'assistant' && (
                  <Avatar className="h-8 w-8">
                    <AvatarFallback className="bg-primary text-white">
                      <Bot className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
                <div className={cn(
                  "max-w-[80%] space-y-2",
                  message.sender === 'user' && "items-end"
                )}>
                  <div className={cn(
                    "rounded-lg px-3 py-2",
                    message.sender === 'user' 
                      ? "bg-primary text-white" 
                      : "bg-muted"
                  )}>
                    <p className="text-sm whitespace-pre-line">{message.content}</p>
                  </div>
                  {message.actions && (
                    <div className="flex flex-wrap gap-2">
                      {message.actions.map((action, i) => (
                        <Button
                          key={i}
                          size="sm"
                          variant="outline"
                          onClick={action.action}
                          className="text-xs"
                        >
                          {action.label}
                        </Button>
                      ))}
                    </div>
                  )}
                  <p className="text-xs text-muted-foreground">
                    {message.timestamp.toLocaleTimeString('ru-RU', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                </div>
                {message.sender === 'user' && (
                  <Avatar className="h-8 w-8">
                    <AvatarFallback>
                      <User className="h-4 w-4" />
                    </AvatarFallback>
                  </Avatar>
                )}
              </div>
            ))}
            {isTyping && (
              <div className="flex gap-3">
                <Avatar className="h-8 w-8">
                  <AvatarFallback className="bg-primary text-white">
                    <Bot className="h-4 w-4" />
                  </AvatarFallback>
                </Avatar>
                <div className="bg-muted rounded-lg px-3 py-2">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce" />
                    <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-100" />
                    <div className="w-2 h-2 bg-primary/60 rounded-full animate-bounce delay-200" />
                  </div>
                </div>
              </div>
            )}
          </div>
        </ScrollArea>

        <div className="p-4 border-t space-y-3">
          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          <div className="flex flex-wrap gap-2">
            {quickActions.map((action, i) => {
              const Icon = action.icon;
              return (
                <Button
                  key={i}
                  variant="outline"
                  size="sm"
                  className="text-xs"
                  onClick={() => handleQuickAction(action.query)}
                >
                  <Icon className="mr-1 h-3 w-3" />
                  {action.label}
                </Button>
              );
            })}
          </div>

          {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
          <div className="flex gap-2">
            <Input
              placeholder="–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && handleSend()}
              className="flex-1"
            />
            <Button
              onClick={handleSend}
              disabled={!inputValue.trim() || isTyping}
              size="icon"
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </CardContent>
    </Card>
  );
}