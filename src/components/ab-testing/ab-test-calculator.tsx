'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Checkbox } from '@/components/ui/checkbox';
import { Sparkles, TrendingUp, Users, DollarSign, Target, Clock, Globe, Gift, ArrowRight, ArrowLeft, Mail, MessageSquare, Bell } from 'lucide-react';

interface ABTestConfig {
  // –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  testName: string;
  segment: string;
  audienceSize: number;

  // –í–∞—Ä–∏–∞–Ω—Ç –ê (–∫–æ–Ω—Ç—Ä–æ–ª—å)
  variantA: {
    name: string;
    creative: string;
    bonus: string;
    offer: string;
  };

  // –í–∞—Ä–∏–∞–Ω—Ç B (—Ç–µ—Å—Ç)
  variantB: {
    name: string;
    creative: string;
    bonus: string;
    offer: string;
  };

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  timing: string;
  geo: string[];
  duration: number;
  confidence: number;
  channels: string[];
}

interface ABTestResult {
  predictedUplift: number;
  confidenceInterval: { min: number; max: number };
  estimatedRevenue: number;
  requiredSampleSize: number;
  recommendation: string;
  insights: string[];
}

interface ABTestCalculatorProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  onTestCreated?: (config: ABTestConfig, result: ABTestResult) => void;
}

export function ABTestCalculator({ open, onOpenChange, onTestCreated }: ABTestCalculatorProps) {
  const [step, setStep] = useState(1);
  const [isCalculating, setIsCalculating] = useState(false);
  const [result, setResult] = useState<ABTestResult | null>(null);

  const [config, setConfig] = useState<ABTestConfig>({
    testName: '',
    segment: 'all',
    audienceSize: 10000,
    variantA: {
      name: '–ö–æ–Ω—Ç—Ä–æ–ª—å (—Ç–µ–∫—É—â–∏–π)',
      creative: '',
      bonus: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–æ–Ω—É—Å 100%',
      offer: '',
    },
    variantB: {
      name: '–í–∞—Ä–∏–∞–Ω—Ç B (–Ω–æ–≤—ã–π)',
      creative: '',
      bonus: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±–æ–Ω—É—Å 150%',
      offer: '',
    },
    timing: 'immediate',
    geo: ['all'],
    duration: 7,
    confidence: 95,
    channels: ['email'],
  });

  const totalSteps = 4;
  const progress = (step / totalSteps) * 100;

  const handleCalculate = async () => {
    setIsCalculating(true);

    // –°–∏–º—É–ª—è—Ü–∏—è AI-—Ä–∞—Å—á—ë—Ç–∞
    await new Promise(resolve => setTimeout(resolve, 2000));

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const baseUplift = Math.random() * 20 + 5; // 5-25%
    const variance = baseUplift * 0.3;

    const aiResult: ABTestResult = {
      predictedUplift: baseUplift,
      confidenceInterval: {
        min: baseUplift - variance,
        max: baseUplift + variance
      },
      estimatedRevenue: config.audienceSize * 50 * (baseUplift / 100),
      requiredSampleSize: Math.ceil(config.audienceSize * 0.2),
      recommendation: baseUplift > 15
        ? 'üöÄ –í—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª! –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ.'
        : baseUplift > 8
        ? '‚úÖ –•–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –¢–µ—Å—Ç —Å—Ç–æ–∏—Ç –ø—Ä–æ–≤–µ—Å—Ç–∏.'
        : '‚ö†Ô∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.',
      insights: [
        `–í–∞—Ä–∏–∞–Ω—Ç B –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ ${baseUplift.toFixed(1)}% –ª—É—á—à—É—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é —á–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å`,
        `–û–∂–∏–¥–∞–µ–º—ã–π –¥–æ—Ö–æ–¥: ‚Ç¨${(config.audienceSize * 50 * (baseUplift / 100)).toLocaleString()}`,
        `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞: ${config.duration} –¥–Ω–µ–π`,
        `–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏: ${config.confidence}%`,
        config.audienceSize < 5000
          ? '–ù–µ–±–æ–ª—å—à–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –º–æ–∂–µ—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏'
          : '–†–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'
      ]
    };

    setResult(aiResult);
    setIsCalculating(false);
    setStep(5); // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  };

  const handleReset = () => {
    setStep(1);
    setResult(null);
    setConfig({
      ...config,
      testName: '',
      variantA: { ...config.variantA, creative: '', offer: '' },
      variantB: { ...config.variantB, creative: '', offer: '' },
    });
  };

  const handleCreateTest = () => {
    if (result) {
      onTestCreated?.(config, result);
      onOpenChange(false);
      handleReset();
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[700px] max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-center gap-2">
            <div className="w-10 h-10 rounded-full bg-gradient-to-r from-purple-500 to-blue-500 flex items-center justify-center">
              <Sparkles className="h-5 w-5 text-white" />
            </div>
            <div>
              <DialogTitle className="text-2xl">AI A/B Test Calculator</DialogTitle>
              <DialogDescription>
                –ü—Ä–µ–¥—Å–∫–∞–∂–∏—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å A/B —Ç–µ—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
              </DialogDescription>
            </div>
          </div>
        </DialogHeader>

        {/* Progress Bar */}
        {step <= totalSteps && (
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>–®–∞–≥ {step} –∏–∑ {totalSteps}</span>
              <span>{Math.round(progress)}%</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>
        )}

        {/* Step 1: –ë–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ */}
        {step === 1 && (
          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="testName">–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞</Label>
              <Input
                id="testName"
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –¢–µ—Å—Ç —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞ –¥–ª—è VIP"
                value={config.testName}
                onChange={(e) => setConfig({ ...config, testName: e.target.value })}
              />
            </div>

            <div>
              <Label htmlFor="segment">–¶–µ–ª–µ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç</Label>
              <Select value={config.segment} onValueChange={(value) => setConfig({ ...config, segment: value })}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –∏–≥—Ä–æ–∫–∏</SelectItem>
                  <SelectItem value="vip">VIP –∏–≥—Ä–æ–∫–∏</SelectItem>
                  <SelectItem value="new">–ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏</SelectItem>
                  <SelectItem value="inactive">–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ (7+ –¥–Ω–µ–π)</SelectItem>
                  <SelectItem value="high-value">–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å (LTV &gt; ‚Ç¨500)</SelectItem>
                  <SelectItem value="slots-lovers">–õ—é–±–∏—Ç–µ–ª–∏ —Å–ª–æ—Ç–æ–≤</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="audience">–†–∞–∑–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏</Label>
              <Input
                id="audience"
                type="number"
                value={config.audienceSize}
                onChange={(e) => setConfig({ ...config, audienceSize: parseInt(e.target.value) || 0 })}
              />
              <p className="text-xs text-muted-foreground mt-1">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –º–∏–Ω–∏–º—É–º 2000 –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∑–Ω–∞—á–∏–º–æ—Å—Ç–∏
              </p>
            </div>
          </div>
        )}

        {/* Step 2: –í–∞—Ä–∏–∞–Ω—Ç A (–∫–æ–Ω—Ç—Ä–æ–ª—å) */}
        {step === 2 && (
          <div className="space-y-4 py-4">
            <div className="flex items-center gap-2 mb-4">
              <Badge variant="outline">–í–∞—Ä–∏–∞–Ω—Ç A - –ö–æ–Ω—Ç—Ä–æ–ª—å</Badge>
            </div>

            <div>
              <Label htmlFor="variantA-creative">–ö—Ä–µ–∞—Ç–∏–≤ / –°–æ–æ–±—â–µ–Ω–∏–µ</Label>
              <Textarea
                id="variantA-creative"
                placeholder="–¢–µ–∫—Å—Ç email/push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ A..."
                value={config.variantA.creative}
                onChange={(e) => setConfig({
                  ...config,
                  variantA: { ...config.variantA, creative: e.target.value }
                })}
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="variantA-bonus">–ë–æ–Ω—É—Å</Label>
              <Select
                value={config.variantA.bonus}
                onValueChange={(value) => setConfig({
                  ...config,
                  variantA: { ...config.variantA, bonus: value }
                })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–Ω—É—Å–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10% –∫—ç—à–±—ç–∫">10% –∫—ç—à–±—ç–∫</SelectItem>
                  <SelectItem value="20% –∫—ç—à–±—ç–∫">20% –∫—ç—à–±—ç–∫</SelectItem>
                  <SelectItem value="50% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç">50% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç</SelectItem>
                  <SelectItem value="100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç">100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç</SelectItem>
                  <SelectItem value="50 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤">50 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤</SelectItem>
                  <SelectItem value="100 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤">100 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤</SelectItem>
                  <SelectItem value="‚Ç¨10 –±–æ–Ω—É—Å">‚Ç¨10 –±–æ–Ω—É—Å</SelectItem>
                  <SelectItem value="‚Ç¨25 –±–æ–Ω—É—Å">‚Ç¨25 –±–æ–Ω—É—Å</SelectItem>
                  <SelectItem value="‚Ç¨50 –±–æ–Ω—É—Å">‚Ç¨50 –±–æ–Ω—É—Å</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="variantA-offer">–£—Å–ª–æ–≤–∏—è –æ—Ñ—Ñ–µ—Ä–∞</Label>
              <Select
                value={config.variantA.offer}
                onValueChange={(value) => setConfig({
                  ...config,
                  variantA: { ...config.variantA, offer: value }
                })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏—è" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x1, 7 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x1, 7 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x3, 7 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x3, 7 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x5, 14 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x5, 14 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x10, 30 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x10, 30 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 3 –¥–Ω—è">–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 3 –¥–Ω—è</SelectItem>
                  <SelectItem value="–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 7 –¥–Ω–µ–π">–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 7 –¥–Ω–µ–π</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )}

        {/* Step 3: –í–∞—Ä–∏–∞–Ω—Ç B (—Ç–µ—Å—Ç) */}
        {step === 3 && (
          <div className="space-y-4 py-4">
            <div className="flex items-center gap-2 mb-4">
              <Badge className="bg-gradient-to-r from-purple-500 to-blue-500">–í–∞—Ä–∏–∞–Ω—Ç B - –¢–µ—Å—Ç</Badge>
            </div>

            <div>
              <Label htmlFor="variantB-creative">–ö—Ä–µ–∞—Ç–∏–≤ / –°–æ–æ–±—â–µ–Ω–∏–µ</Label>
              <Textarea
                id="variantB-creative"
                placeholder="–¢–µ–∫—Å—Ç email/push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ B..."
                value={config.variantB.creative}
                onChange={(e) => setConfig({
                  ...config,
                  variantB: { ...config.variantB, creative: e.target.value }
                })}
                rows={3}
              />
            </div>

            <div>
              <Label htmlFor="variantB-bonus">–ë–æ–Ω—É—Å</Label>
              <Select
                value={config.variantB.bonus}
                onValueChange={(value) => setConfig({
                  ...config,
                  variantB: { ...config.variantB, bonus: value }
                })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –±–æ–Ω—É—Å–∞" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10% –∫—ç—à–±—ç–∫">10% –∫—ç—à–±—ç–∫</SelectItem>
                  <SelectItem value="20% –∫—ç—à–±—ç–∫">20% –∫—ç—à–±—ç–∫</SelectItem>
                  <SelectItem value="50% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç">50% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç</SelectItem>
                  <SelectItem value="100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç">100% –Ω–∞ –¥–µ–ø–æ–∑–∏—Ç</SelectItem>
                  <SelectItem value="50 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤">50 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤</SelectItem>
                  <SelectItem value="100 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤">100 —Ñ—Ä–∏—Å–ø–∏–Ω–æ–≤</SelectItem>
                  <SelectItem value="‚Ç¨10 –±–æ–Ω—É—Å">‚Ç¨10 –±–æ–Ω—É—Å</SelectItem>
                  <SelectItem value="‚Ç¨25 –±–æ–Ω—É—Å">‚Ç¨25 –±–æ–Ω—É—Å</SelectItem>
                  <SelectItem value="‚Ç¨50 –±–æ–Ω—É—Å">‚Ç¨50 –±–æ–Ω—É—Å</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="variantB-offer">–£—Å–ª–æ–≤–∏—è –æ—Ñ—Ñ–µ—Ä–∞</Label>
              <Select
                value={config.variantB.offer}
                onValueChange={(value) => setConfig({
                  ...config,
                  variantB: { ...config.variantB, offer: value }
                })}
              >
                <SelectTrigger>
                  <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª–æ–≤–∏—è" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x1, 7 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x1, 7 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x3, 7 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x3, 7 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x5, 14 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x5, 14 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–í–µ–π–¥–∂–µ—Ä x10, 30 –¥–Ω–µ–π">–í–µ–π–¥–∂–µ—Ä x10, 30 –¥–Ω–µ–π</SelectItem>
                  <SelectItem value="–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 3 –¥–Ω—è">–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 3 –¥–Ω—è</SelectItem>
                  <SelectItem value="–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 7 –¥–Ω–µ–π">–ë–µ–∑ –≤–µ–π–¥–∂–µ—Ä–∞, 7 –¥–Ω–µ–π</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
        )}

        {/* Step 4: –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
        {step === 4 && (
          <div className="space-y-4 py-4">
            <div>
              <Label htmlFor="timing">–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏</Label>
              <Select value={config.timing} onValueChange={(value) => setConfig({ ...config, timing: value })}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="immediate">–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ</SelectItem>
                  <SelectItem value="evening">–í–µ—á–µ—Ä (18:00-21:00)</SelectItem>
                  <SelectItem value="weekend">–í—ã—Ö–æ–¥–Ω—ã–µ</SelectItem>
                  <SelectItem value="optimal">AI –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="geo">–ì–µ–æ–≥—Ä–∞—Ñ–∏—è</Label>
              <Select value={config.geo[0]} onValueChange={(value) => setConfig({ ...config, geo: [value] })}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ —Å—Ç—Ä–∞–Ω—ã</SelectItem>
                  <SelectItem value="eu">–ï–≤—Ä–æ–ø–∞</SelectItem>
                  <SelectItem value="de">–ì–µ—Ä–º–∞–Ω–∏—è</SelectItem>
                  <SelectItem value="uk">–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è</SelectItem>
                  <SelectItem value="nordic">–°–∫–∞–Ω–¥–∏–Ω–∞–≤–∏—è</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <Label htmlFor="duration">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞ (–¥–Ω–∏)</Label>
              <Input
                id="duration"
                type="number"
                min="3"
                max="30"
                value={config.duration}
                onChange={(e) => setConfig({ ...config, duration: parseInt(e.target.value) || 7 })}
              />
            </div>

            <div>
              <Label htmlFor="confidence">–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ (%)</Label>
              <Select
                value={config.confidence.toString()}
                onValueChange={(value) => setConfig({ ...config, confidence: parseInt(value) })}
              >
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="90">90% - –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç</SelectItem>
                  <SelectItem value="95">95% - –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π</SelectItem>
                  <SelectItem value="99">99% - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div className="space-y-3">
              <Label>–ö–∞–Ω–∞–ª—ã –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏</Label>
              <div className="space-y-2">
                <div className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent">
                  <Checkbox
                    id="channel-email"
                    checked={config.channels.includes('email')}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setConfig({ ...config, channels: [...config.channels, 'email'] });
                      } else {
                        setConfig({ ...config, channels: config.channels.filter(c => c !== 'email') });
                      }
                    }}
                  />
                  <Label htmlFor="channel-email" className="flex items-center gap-2 cursor-pointer flex-1">
                    <Mail className="h-4 w-4 text-blue-600" />
                    <span>Email</span>
                  </Label>
                </div>

                <div className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent">
                  <Checkbox
                    id="channel-sms"
                    checked={config.channels.includes('sms')}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setConfig({ ...config, channels: [...config.channels, 'sms'] });
                      } else {
                        setConfig({ ...config, channels: config.channels.filter(c => c !== 'sms') });
                      }
                    }}
                  />
                  <Label htmlFor="channel-sms" className="flex items-center gap-2 cursor-pointer flex-1">
                    <MessageSquare className="h-4 w-4 text-green-600" />
                    <span>SMS</span>
                  </Label>
                </div>

                <div className="flex items-center space-x-3 p-3 border rounded-lg hover:bg-accent">
                  <Checkbox
                    id="channel-push"
                    checked={config.channels.includes('push')}
                    onCheckedChange={(checked) => {
                      if (checked) {
                        setConfig({ ...config, channels: [...config.channels, 'push'] });
                      } else {
                        setConfig({ ...config, channels: config.channels.filter(c => c !== 'push') });
                      }
                    }}
                  />
                  <Label htmlFor="channel-push" className="flex items-center gap-2 cursor-pointer flex-1">
                    <Bell className="h-4 w-4 text-purple-600" />
                    <span>Push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</span>
                  </Label>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Step 5: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è */}
        {step === 5 && result && (
          <div className="space-y-4 py-4">
            <Card className="border-2 border-purple-500">
              <CardHeader className="bg-gradient-to-r from-purple-50 to-blue-50">
                <CardTitle className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-purple-600" />
                  AI –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-6 space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
                    <div className="text-3xl font-bold text-green-600">
                      +{result.predictedUplift.toFixed(1)}%
                    </div>
                    <div className="text-sm text-muted-foreground mt-1">Predicted Uplift</div>
                  </div>

                  <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="text-3xl font-bold text-blue-600">
                      ‚Ç¨{result.estimatedRevenue.toLocaleString()}
                    </div>
                    <div className="text-sm text-muted-foreground mt-1">Estimated Revenue</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Confidence Interval</span>
                    <span className="font-medium">
                      {result.confidenceInterval.min.toFixed(1)}% - {result.confidenceInterval.max.toFixed(1)}%
                    </span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-muted-foreground">Required Sample Size</span>
                    <span className="font-medium">{result.requiredSampleSize.toLocaleString()}</span>
                  </div>
                </div>

                <div className="p-4 bg-purple-50 rounded-lg border border-purple-200">
                  <div className="font-medium mb-2">–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</div>
                  <p className="text-sm">{result.recommendation}</p>
                </div>

                <div>
                  <div className="font-medium mb-2">AI Insights:</div>
                  <ul className="space-y-1">
                    {result.insights.map((insight, i) => (
                      <li key={i} className="text-sm flex items-start gap-2">
                        <span className="text-purple-500 mt-0.5">‚Ä¢</span>
                        <span>{insight}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>
          </div>
        )}

        <DialogFooter className="flex-row gap-2 sm:gap-2">
          {step > 1 && step <= totalSteps && (
            <Button variant="outline" onClick={() => setStep(step - 1)} className="flex-1">
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          )}

          {step < totalSteps && (
            <Button onClick={() => setStep(step + 1)} className="flex-1">
              –î–∞–ª–µ–µ
              <ArrowRight className="h-4 w-4 ml-2" />
            </Button>
          )}

          {step === totalSteps && !result && (
            <Button
              onClick={handleCalculate}
              disabled={isCalculating}
              className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600"
            >
              {isCalculating ? (
                <>
                  <Sparkles className="h-4 w-4 mr-2 animate-spin" />
                  AI –°—á–∏—Ç–∞–µ—Ç...
                </>
              ) : (
                <>
                  <Sparkles className="h-4 w-4 mr-2" />
                  –†–∞—Å—Å—á–∏—Ç–∞—Ç—å Uplift
                </>
              )}
            </Button>
          )}

          {step === 5 && result && (
            <>
              <Button variant="outline" onClick={handleReset} className="flex-1">
                –ù–æ–≤—ã–π —Ç–µ—Å—Ç
              </Button>
              <Button onClick={handleCreateTest} className="flex-1 bg-gradient-to-r from-purple-600 to-blue-600">
                –°–æ–∑–¥–∞—Ç—å A/B —Ç–µ—Å—Ç
              </Button>
            </>
          )}
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
