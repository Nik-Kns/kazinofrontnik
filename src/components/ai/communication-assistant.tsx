"use client";

import { useState } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Label } from "@/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  MessageSquare,
  CheckCircle2,
  AlertTriangle,
  XCircle,
  Sparkles,
  Send,
  RefreshCw,
  Copy,
  Wand2,
  Target,
  Users,
  TrendingUp,
  AlertCircle
} from "lucide-react";
import { cn } from "@/lib/utils";

interface CommunicationCheck {
  category: 'grammar' | 'style' | 'compliance' | 'effectiveness';
  status: 'good' | 'warning' | 'error';
  message: string;
  suggestion?: string;
}

interface AIAnalysis {
  score: number;
  checks: CommunicationCheck[];
  improvements: string[];
  targetAudience: string;
  expectedCTR: number;
  sentiment: 'positive' | 'neutral' | 'negative';
}

export function CommunicationAssistant() {
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState<'email' | 'push' | 'sms' | 'in-app'>('email');
  const [audience, setAudience] = useState<'all' | 'vip' | 'new' | 'dormant'>('all');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState<AIAnalysis | null>(null);
  const [improvedMessage, setImprovedMessage] = useState('');

  const analyzeMessage = () => {
    setIsAnalyzing(true);
    // –°–∏–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    setTimeout(() => {
      setAnalysis({
        score: 78,
        checks: [
          {
            category: 'grammar',
            status: 'good',
            message: '–ì—Ä–∞–º–º–∞—Ç–∏–∫–∞ –∏ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã'
          },
          {
            category: 'style',
            status: 'warning',
            message: '–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            suggestion: '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏'
          },
          {
            category: 'compliance',
            status: 'good',
            message: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–∞–≤–∏–ª–∞–º –±—Ä–µ–Ω–¥–∞'
          },
          {
            category: 'effectiveness',
            status: 'warning',
            message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —á–µ—Ç–∫–∏–π CTA',
            suggestion: '–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'
          }
        ],
        improvements: [
          '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é (–∏–º—è –∏–≥—Ä–æ–∫–∞)',
          '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤—ã–≥–æ–¥—É –≤ —Ü–∏—Ñ—Ä–∞—Ö',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã',
          '–°–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏'
        ],
        targetAudience: 'VIP –∏–≥—Ä–æ–∫–∏',
        expectedCTR: 3.2,
        sentiment: 'neutral'
      });
      setImprovedMessage('üé∞ {name}, –≤–∞—à VIP –±–æ–Ω—É—Å 100% –¥–æ ‚Ç¨500 –∂–¥–µ—Ç! –¢–æ–ª—å–∫–æ 24 —á–∞—Å–∞. –ò–≥—Ä–∞—Ç—å —Å–µ–π—á–∞—Å ‚Üí');
      setIsAnalyzing(false);
    }, 1500);
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'good': return <CheckCircle2 className="h-4 w-4 text-green-600" />;
      case 'warning': return <AlertTriangle className="h-4 w-4 text-yellow-600" />;
      case 'error': return <XCircle className="h-4 w-4 text-red-600" />;
      default: return null;
    }
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  return (
    <Card className="w-full">
      <CardHeader>
        <div className="flex items-center gap-2">
          <MessageSquare className="h-5 w-5 text-primary" />
          <CardTitle>–ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π</CardTitle>
        </div>
        <CardDescription>
          –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
        </CardDescription>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="grid gap-4 md:grid-cols-2">
            <div className="space-y-2">
              <Label>–¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è</Label>
              <Select value={messageType} onValueChange={(v: any) => setMessageType(v)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="email">Email</SelectItem>
                  <SelectItem value="push">Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</SelectItem>
                  <SelectItem value="sms">SMS</SelectItem>
                  <SelectItem value="in-app">In-App —Å–æ–æ–±—â–µ–Ω–∏–µ</SelectItem>
                </SelectContent>
              </Select>
            </div>
            <div className="space-y-2">
              <Label>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</Label>
              <Select value={audience} onValueChange={(v: any) => setAudience(v)}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">–í—Å–µ –∏–≥—Ä–æ–∫–∏</SelectItem>
                  <SelectItem value="vip">VIP —Å–µ–≥–º–µ–Ω—Ç</SelectItem>
                  <SelectItem value="new">–ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏</SelectItem>
                  <SelectItem value="dormant">–°–ø—è—â–∏–µ –∏–≥—Ä–æ–∫–∏</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="space-y-2">
            <Label>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è</Label>
            <Textarea
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              className="min-h-[100px]"
            />
            <div className="flex items-center justify-between">
              <span className="text-xs text-muted-foreground">
                {message.length} —Å–∏–º–≤–æ–ª–æ–≤
              </span>
              <Button
                onClick={analyzeMessage}
                disabled={!message || isAnalyzing}
                size="sm"
              >
                {isAnalyzing ? (
                  <>
                    <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é...
                  </>
                ) : (
                  <>
                    <Sparkles className="mr-2 h-4 w-4" />
                    –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                  </>
                )}
              </Button>
            </div>
          </div>

          {analysis && (
            <Tabs defaultValue="analysis" className="w-full">
              <TabsList className="grid w-full grid-cols-3">
                <TabsTrigger value="analysis">–ê–Ω–∞–ª–∏–∑</TabsTrigger>
                <TabsTrigger value="improvements">–£–ª—É—á—à–µ–Ω–∏—è</TabsTrigger>
                <TabsTrigger value="metrics">–ú–µ—Ç—Ä–∏–∫–∏</TabsTrigger>
              </TabsList>

              <TabsContent value="analysis" className="space-y-4">
                <div className="flex items-center justify-between p-4 bg-muted rounded-lg">
                  <div>
                    <p className="text-sm font-medium">–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞</p>
                    <p className={cn("text-2xl font-bold", getScoreColor(analysis.score))}>
                      {analysis.score}/100
                    </p>
                  </div>
                  <Progress value={analysis.score} className="w-32" />
                </div>

                <div className="space-y-2">
                  {analysis.checks.map((check, i) => (
                    <div key={i} className="flex items-start gap-3 p-3 border rounded-lg">
                      {getStatusIcon(check.status)}
                      <div className="flex-1">
                        <p className="text-sm font-medium">{check.message}</p>
                        {check.suggestion && (
                          <p className="text-xs text-muted-foreground mt-1">
                            üí° {check.suggestion}
                          </p>
                        )}
                      </div>
                    </div>
                  ))}
                </div>
              </TabsContent>

              <TabsContent value="improvements" className="space-y-4">
                <div className="space-y-2">
                  <Label>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é</Label>
                  <ul className="space-y-2">
                    {analysis.improvements.map((improvement, i) => (
                      <li key={i} className="flex items-start gap-2 text-sm">
                        <Wand2 className="h-4 w-4 text-primary mt-0.5" />
                        <span>{improvement}</span>
                      </li>
                    ))}
                  </ul>
                </div>

                {improvedMessage && (
                  <div className="space-y-2">
                    <Label>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è</Label>
                    <div className="p-3 bg-primary/5 border border-primary/20 rounded-lg">
                      <p className="text-sm">{improvedMessage}</p>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => {
                          navigator.clipboard.writeText(improvedMessage);
                        }}
                      >
                        <Copy className="mr-2 h-4 w-4" />
                        –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => setMessage(improvedMessage)}
                      >
                        <Send className="mr-2 h-4 w-4" />
                        –ü—Ä–∏–º–µ–Ω–∏—Ç—å
                      </Button>
                    </div>
                  </div>
                )}
              </TabsContent>

              <TabsContent value="metrics" className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Target className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm text-muted-foreground">–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</span>
                    </div>
                    <p className="font-medium">{analysis.targetAudience}</p>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <TrendingUp className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm text-muted-foreground">–û–∂–∏–¥–∞–µ–º—ã–π CTR</span>
                    </div>
                    <p className="font-medium">{analysis.expectedCTR}%</p>
                  </div>
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <Users className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm text-muted-foreground">–¢–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å</span>
                    </div>
                    <Badge variant={
                      analysis.sentiment === 'positive' ? 'default' :
                      analysis.sentiment === 'negative' ? 'destructive' : 'secondary'
                    }>
                      {analysis.sentiment === 'positive' ? '–ü–æ–∑–∏—Ç–∏–≤–Ω–∞—è' :
                       analysis.sentiment === 'negative' ? '–ù–µ–≥–∞—Ç–∏–≤–Ω–∞—è' : '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è'}
                    </Badge>
                  </div>
                </div>

                <div className="p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
                  <div className="flex gap-2">
                    <AlertCircle className="h-4 w-4 text-yellow-600 mt-0.5" />
                    <div className="text-sm">
                      <p className="font-medium text-yellow-900">–°–æ–≤–µ—Ç</p>
                      <p className="text-yellow-700">
                        –î–ª—è {messageType === 'push' ? 'push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' : 
                             messageType === 'sms' ? 'SMS' : 
                             messageType === 'email' ? 'email-—Ä–∞—Å—Å—ã–ª–æ–∫' : 'in-app —Å–æ–æ–±—â–µ–Ω–∏–π'} 
                        {' '}–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: 19:00-21:00
                      </p>
                    </div>
                  </div>
                </div>
              </TabsContent>
            </Tabs>
          )}
        </div>
      </CardContent>
    </Card>
  );
}