'use client';

import { useState } from 'react';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Sparkles, ArrowRight, ArrowLeft, X } from 'lucide-react';

const STEPS = [
  {
    title: 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ AiGaming.Bot!',
    description: '–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —É–¥–µ—Ä–∂–∞–Ω–∏—é –∏–≥—Ä–æ–∫–æ–≤. –î–∞–≤–∞–π—Ç–µ –±—ã—Å—Ç—Ä–æ –ø—Ä–æ–π–¥–µ–º—Å—è –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
    color: '#2962FF'
  },
  {
    title: 'üîå –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö',
    description: '–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≤–µ–¥–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã. –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ä–∏—Å–∫–∏ –æ—Ç—Ç–æ–∫–∞.',
    color: '#9C27B0'
  },
  {
    title: 'üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å–µ–≥–º–µ–Ω—Ç—ã',
    description: 'AI —Å–æ–∑–¥–∞–µ—Ç —É–º–Ω—ã–µ —Å–µ–≥–º–µ–Ω—Ç—ã –∏–≥—Ä–æ–∫–æ–≤ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Ö –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –í—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
    color: '#00C853'
  },
  {
    title: 'üéØ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤',
    description: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI Copilot –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π. –°–∏—Å—Ç–µ–º–∞ —Å–∞–º–∞ –ø–æ–¥—Å–∫–∞–∂–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.',
    color: '#FF6D00'
  },
  {
    title: 'üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!',
    description: '–¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –æ—Å–Ω–æ–≤—ã! –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–∞–∑–¥–µ–ª–∞ "–ö–æ–º–∞–Ω–¥–Ω—ã–π —Ü–µ–Ω—Ç—Ä" —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é retention.',
    color: '#FFD600'
  }
];

interface SimpleOnboardingProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
}

export function SimpleOnboarding({ open, onOpenChange }: SimpleOnboardingProps) {
  const [currentStep, setCurrentStep] = useState(0);

  const currentStepData = STEPS[currentStep];
  const progress = ((currentStep + 1) / STEPS.length) * 100;
  const isFirstStep = currentStep === 0;
  const isLastStep = currentStep === STEPS.length - 1;

  const handleNext = () => {
    if (isLastStep) {
      onOpenChange(false);
      setCurrentStep(0);
    } else {
      setCurrentStep(prev => prev + 1);
    }
  };

  const handleBack = () => {
    if (!isFirstStep) {
      setCurrentStep(prev => prev - 1);
    }
  };

  const handleClose = () => {
    onOpenChange(false);
    setCurrentStep(0);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="sm:max-w-[600px]">
        <button
          onClick={handleClose}
          className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground"
        >
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </button>

        <DialogHeader>
          <div
            className="w-12 h-12 rounded-full flex items-center justify-center mb-4"
            style={{ backgroundColor: currentStepData.color + '20' }}
          >
            <Sparkles
              className="h-6 w-6"
              style={{ color: currentStepData.color }}
            />
          </div>
          <DialogTitle className="text-2xl">{currentStepData.title}</DialogTitle>
          <DialogDescription className="text-base pt-2">
            {currentStepData.description}
          </DialogDescription>
        </DialogHeader>

        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <div className="flex justify-between text-sm text-muted-foreground">
              <span>–®–∞–≥ {currentStep + 1} –∏–∑ {STEPS.length}</span>
              <span>{Math.round(progress)}%</span>
            </div>
            <Progress value={progress} className="h-2" />
          </div>

          <div className="flex gap-2">
            {STEPS.map((_, index) => (
              <button
                key={index}
                onClick={() => setCurrentStep(index)}
                className="flex-1 h-1 rounded-full transition-all"
                style={{
                  backgroundColor: index <= currentStep
                    ? STEPS[index].color
                    : '#e5e7eb'
                }}
              />
            ))}
          </div>
        </div>

        <DialogFooter className="flex-row gap-2 sm:gap-2">
          {!isFirstStep && (
            <Button
              variant="outline"
              onClick={handleBack}
              className="flex-1"
            >
              <ArrowLeft className="h-4 w-4 mr-2" />
              –ù–∞–∑–∞–¥
            </Button>
          )}
          <Button
            onClick={handleNext}
            className="flex-1"
            style={{ backgroundColor: currentStepData.color }}
          >
            {isLastStep ? '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É' : '–î–∞–ª–µ–µ'}
            {!isLastStep && <ArrowRight className="h-4 w-4 ml-2" />}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
