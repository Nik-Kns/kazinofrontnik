'use client';

import { useState, useEffect, useCallback } from 'react';
import { useRouter } from 'next/navigation';
import type { OnboardingState, OnboardingStep } from '@/lib/onboarding-types';
import {
  INITIAL_ONBOARDING_STATE,
  ONBOARDING_STORAGE_KEY,
  ONBOARDING_STEPS
} from '@/lib/onboarding-types';

/**
 * –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º AI-–æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
 */
export function useOnboarding() {
  const router = useRouter();
  const [state, setState] = useState<OnboardingState>(INITIAL_ONBOARDING_STATE);
  const [isMounted, setIsMounted] = useState(false);

  // –ü—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  useEffect(() => {
    setIsMounted(true);
  }, []);

  // –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  const startOnboarding = useCallback(() => {
    console.log('üöÄ Starting onboarding...');
    setState({
      ...INITIAL_ONBOARDING_STATE,
      isActive: true
    });
    console.log('‚úÖ State updated to active');
  }, []);

  // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
  const stopOnboarding = useCallback(() => {
    setState(INITIAL_ONBOARDING_STATE); // –ü–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å
  }, []);

  // –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥
  const nextStep = useCallback(() => {
    setState(prev => {
      const nextStepIndex = prev.currentStep + 1;
      const isLastStep = nextStepIndex >= ONBOARDING_STEPS.length;

      // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
      const currentStepId = ONBOARDING_STEPS[prev.currentStep].id;
      const newCompletedSteps = [...prev.completedSteps];
      if (!newCompletedSteps.includes(currentStepId)) {
        newCompletedSteps.push(currentStepId);
      }

      const newProgress = (newCompletedSteps.length / ONBOARDING_STEPS.length) * 100;

      if (isLastStep) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
        localStorage.setItem('onboarding-completed', 'true');
        return {
          ...prev,
          isActive: false,
          completedSteps: newCompletedSteps,
          progress: 100
        };
      }

      return {
        ...prev,
        currentStep: nextStepIndex,
        completedSteps: newCompletedSteps,
        progress: newProgress
      };
    });
  }, []);

  // –ü—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
  const prevStep = useCallback(() => {
    setState(prev => {
      if (prev.currentStep === 0) return prev;

      return {
        ...prev,
        currentStep: prev.currentStep - 1
      };
    });
  }, []);

  // –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥
  const skipStep = useCallback(() => {
    setState(prev => {
      const currentStepId = ONBOARDING_STEPS[prev.currentStep].id;
      const newSkippedSteps = [...prev.skippedSteps];

      if (!newSkippedSteps.includes(currentStepId)) {
        newSkippedSteps.push(currentStepId);
      }

      const nextStepIndex = prev.currentStep + 1;
      const isLastStep = nextStepIndex >= ONBOARDING_STEPS.length;

      if (isLastStep) {
        localStorage.setItem('onboarding-completed', 'true');
        return {
          ...prev,
          isActive: false,
          skippedSteps: newSkippedSteps
        };
      }

      return {
        ...prev,
        currentStep: nextStepIndex,
        skippedSteps: newSkippedSteps
      };
    });
  }, []);

  // –û—Ç–º–µ—Ç–∏—Ç—å —à–∞–≥ –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–π
  const completeStep = useCallback((stepId: OnboardingStep) => {
    setState(prev => {
      const newCompletedSteps = [...prev.completedSteps];
      if (!newCompletedSteps.includes(stepId)) {
        newCompletedSteps.push(stepId);
      }

      const newProgress = (newCompletedSteps.length / ONBOARDING_STEPS.length) * 100;

      return {
        ...prev,
        completedSteps: newCompletedSteps,
        progress: newProgress
      };
    });
  }, []);

  // –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É —à–∞–≥—É
  const goToStep = useCallback((stepIndex: number) => {
    if (stepIndex < 0 || stepIndex >= ONBOARDING_STEPS.length) return;

    setState(prev => ({
      ...prev,
      currentStep: stepIndex
    }));
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –∫–Ω–æ–ø–∫–∏
  const handlePrimaryAction = useCallback(() => {
    const currentStepConfig = ONBOARDING_STEPS[state.currentStep];
    const action = currentStepConfig.buttons.primary?.action;
    const href = currentStepConfig.buttons.primary?.href;

    switch (action) {
      case 'navigate':
        if (href) {
          router.push(href);
          // –î–∞—ë–º –≤—Ä–µ–º—è –Ω–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
          setTimeout(() => nextStep(), 500);
        }
        break;

      case 'next':
        nextStep();
        break;

      case 'auto-configure':
        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        nextStep();
        break;

      case 'create':
        // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–∞
        nextStep();
        break;

      default:
        nextStep();
    }
  }, [state.currentStep, nextStep, router]);

  const handleSecondaryAction = useCallback(() => {
    const currentStepConfig = ONBOARDING_STEPS[state.currentStep];
    const action = currentStepConfig.buttons.secondary?.action;

    switch (action) {
      case 'skip':
        skipStep();
        break;

      case 'back':
        prevStep();
        break;

      default:
        break;
    }
  }, [state.currentStep, skipStep, prevStep]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    isActive: state.isActive,
    currentStep: state.currentStep,
    currentStepConfig: ONBOARDING_STEPS[state.currentStep],
    completedSteps: state.completedSteps,
    skippedSteps: state.skippedSteps,
    progress: state.progress,
    totalSteps: ONBOARDING_STEPS.length,

    // –î–µ–π—Å—Ç–≤–∏—è
    startOnboarding,
    stopOnboarding,
    nextStep,
    prevStep,
    skipStep,
    completeStep,
    goToStep,
    handlePrimaryAction,
    handleSecondaryAction
  };
}
